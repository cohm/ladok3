We want to compute statistics based on LADOK data.
We want to answer the following questions:
\begin{enumerate}
\item\label[question]{QGradeDistInCourse} What are the grade distribution of a 
course round?
\item\label[question]{QGradeDistDiffYears} How do grade distributions differ 
between years (\ie rounds) for the same course?
\item\label[question]{QGradeDistDiffCourses} How do grade distributions differ 
between (similar) courses?
\item How is the throughput distribution of a course?
\item How do throughput distributions vary between years?
\end{enumerate}

We provide the module [[data]] ([[<<data.py>>]]) to extract the necessary data 
from LADOK (\cref{StatsData}).
This is a subcommand for the [[ladok]] command-line interface.
It can be used like this:
\begin{minted}{bash}
ladok data DD1315 > DD1315.csv
\end{minted}
This program will produce CSV-formated data to answer the questions above.
The data is formated like this:
\begin{itemize}
\item course,
\item round,
\item component,
\item student (pseudonym),
\item grade,
\item normalized time.
\end{itemize}
Or more concretely, we can use it like this:
\begin{pyblock}[statstest][numbers=left]
import numpy as np
import pandas as pd

prgi = pd.read_csv("DD1315.csv")

rounds_years = {
  "51386": "2020",
  "50869": "2019",
  "50662": "2018",
  "50650": "2017",
  "50523": "2016"
}
prgi_LAB3 = prgi[
  prgi.Component.eq("LAB3") & prgi.Round.isin(rounds_years.keys())
].replace(rounds_years)

stats = pd.crosstab(prgi_LAB3.Grade, prgi_LAB3.Round)

for column in stats:
  stats[column] /= stats[column].sum()

print(stats.round(3).to_latex(
  label="GradeDistribution",
  caption="Grade distribution for the DD1315 course."
))
\end{pyblock}
This yields \cref{GradeDistribution}.

\stdoutpythontex

If we convert the grades to numbers, then we can also compute the average grade 
with standard deviation \etc.
\begin{pyblock}[statstest][numbers=left,firstnumber=last]
grade_map = {
  "A": 5, "B": 4, "C": 3, "D": 2, "E": 1, "-": 0, np.nan: 0
}
grades_num = prgi_LAB3[ ["Round", "Grade"] ].replace(grade_map)

print(grades_num.groupby("Round")["Grade"].describe().round(3).to_latex(
  label="GradeStats",
  caption="Statistics for grades of the DD1315 course, grade map: " +
    ", ".join([f"{g} $\mapsto$ {s}" for g, s in grade_map.items()]) + "."
))
\end{pyblock}
This yields \cref{GradeStats}.

\stdoutpythontex

Finally, we'd like to merge the old rounds to compare with the latest.
\begin{pyblock}[statstest][numbers=left,firstnumber=last]
rounds_avg = {
  "2019": "2019--2016",
  "2018": "2019--2016",
  "2017": "2019--2016",
  "2016": "2019--2016"
}
grades_avg = grades_num.replace(rounds_avg)

print(grades_avg.groupby("Round")["Grade"].describe().round(3).to_latex(
  label="GradeStatsAvg",
  caption="Statistics for grades of the DD1315 course, grade map: " +
    ", ".join([f"{g} $\mapsto$ {s}" for g, s in grade_map.items()]) + "."
))
\end{pyblock}
This yields \cref{GradeStatsAvg}.

\stdoutpythontex

\section{The [[data]] subcommand}\label{StatsData}

This is a subcommand run as part of the [[ladok3.cli]] module.
We provide a function [[add_command_options]] that adds the subcommand options 
to a given parser.
We need access to LADOK through the [[ladok3]] module.
We will also write data to disk in CSV form, so we need the [[csv]] module.
<<data.py>>=
import csv
import datetime
import ladok3
import os
import sys

<<functions>>

def add_command_options(parser):
  <<add data parser to parser>>
  <<add data command arguments to data parser>>

def command(ladok, args):
  <<produce data about course specified in args>>
@

\subsection{Setting up the data command options}

We add a subparser.
We set it up to use the function [[data_command]].
<<add data parser to parser>>=
data_parser = parser.add_parser("data",
  help="Returns course results data in CSV form")
data_parser.set_defaults(func=command)
@

We take a course code as an argument, then we produce CSV data for that course.
<<add data command arguments to data parser>>=
data_parser.add_argument("course_code",
  help="The course code of the course for which to export data")
@


\section{Producing data}

We fetch the data from LADOK and print it in CSV format to standard out 
([[sys.stdout]]).
This way the user can deal with how to store the data.
<<produce data about course specified in args>>=
data_writer = csv.writer(sys.stdout)
course_rounds = ladok.search_course_rounds(code=args.course_code)

data_writer.writerow([
  "Course", "Round", "Component", "Student", "Grade", "Time"
])
for course_round in course_rounds:
  data = extract_data_for_round(ladok, course_round)
  data = clean_data(data)

  for student, component, grade, time in data:
    data_writer.writerow(
      [course_round.code, course_round.round_code, component,
        student, grade, time]
    )
@


\section{Extracting data for a round}

Now we want to extract data for a given course round.
This is done by the function~[[extract_data_for_round]].
We need access to LADOK through the [[ladok]] object of type [[LadokSession]].
We also need the course round through the [[course_round]] object of type 
[[CourseRound]].
<<functions>>=
def extract_data_for_round(ladok, course_round):
  <<compute start and length of the course>>
  <<get the results for the course round>>

  for result in results:
    student = result["Student"]["Uid"]

    for component_result in result["ResultatPaUtbildningar"]:
      if component_result["HarTillgodoraknande"]:
        continue

      <<get the component result data>>
      <<extract component code from result data>>
      <<extract grade and normalized date from result data>>

      yield (student, component_code, grade, normalized_date)
@

We need the start of the course and the length to be able to normalize the 
dates for the grades.
<<compute start and length of the course>>=
course_start = course_round.start
course_length = course_round.end - course_start
@

We must get the results for the course round from LADOK.
For this we must use an instance ID of a component.
However, LADOK returns the results for all components, not just the one 
requested for.
<<get the results for the course round>>=
component = course_round.components()[0]
results = ladok.search_reported_results_JSON(
  course_round.round_id, component.instance_id)
@

Depending on whether the data is attested or not, we can get the actual grade 
and date from two different substructures:
\enquote{Arbetsunderlag} are results in LADOK that have been entered, but not 
attested;
\enquote{SenastAttesteradeResultat} are results that have been attested.
They both have the same structure.
<<get the component result data>>=
if "Arbetsunderlag" in component_result:
  result_data = component_result["Arbetsunderlag"]
elif "SenastAttesteradeResultat" in component_result:
  result_data = component_result["SenastAttesteradeResultat"]
else:
  continue
@

The results only refer to the component's instance ID, so we must match the 
component on that ID.
The [[course_round]] object allows us to do exactly that with the 
[[components]] method.
We note that we can ignore the grade on the whole course, since that one is 
determined by the other components.
<<extract component code from result data>>=
matching_component = course_round.components(
  instance_id=result_data["UtbildningsinstansUID"])
if len(matching_component) < 1:
  continue
component_code = matching_component[0].code
@

Finally, if there is a grade, we can extract the grade and compute the 
normalized date.
However, if there are no results, we set [[None]].
<<extract grade and normalized date from result data>>=
if "Betygsgradsobjekt" in result_data:
  grade = result_data["Betygsgradsobjekt"]["Kod"]
  date = datetime.date.fromisoformat(
    result_data["Examinationsdatum"])
  normalized_date = (date - course_start) / course_length
else:
  grade = "-"
  normalized_date = None
@


\section{Clean the data}

We want to filter out some values from the data.
We only want to keep students who are registered on the course the first time.
<<functions>>=
def clean_data(data):
  data = list(data)
  students_to_remove = reregistered_students(data)
  return remove_students(students_to_remove, data)
@

We approximate first time registrations with grades reported before the course 
started.
Thus we remove any student who has a result before the course.
It would be more exact to remove students who are in fact reregistered in 
LADOK, but we leave that for a future version.
<<functions>>=
def reregistered_students(data):
  students = set()
  for student, _, _, time in data:
    if time and time < 0:
      students.add(student)
  return students

def remove_students(students, data):
  for row in data:
    if row[0] not in students:
      yield row
@

