We want to report results for a student directly from the command line.
We simply take the following arguments:
\begin{itemize}
\item student identifier,
\item course identifier,
\item course component,
\item grade, and
\item date\footnote{Optional, we set today's date if not present.}.
\end{itemize}

\section{The [[report]] subcommand}\label{ReportCommand}

This is a subcommand is run as part of the [[ladok3.cli]] module.
We provide a function [[add_command_options]] that adds the subcommand options 
to a given parser.
We need access to LADOK through the [[ladok3]] module.
<<report.py>>=
import datetime
import ladok3

def add_command_options(parser):
  report_parser = parser.add_parser("report",
    help="Reports course results to LADOK",
    description="Reports course results to LADOK"
  )
  report_parser.set_defaults(func=command)
  <<add report command arguments to report parser>>

def command(ladok, args):
  <<report results given in args to LADOK>>
@


\section{Report the results}

We can report the results as follows.
<<report results given in args to LADOK>>=
try:
  student = ladok.get_student(args.student_id)
  course = student.courses(code=args.course_code)[0]
  result = course.results(component=args.component_code)[0]
  result.set_grade(args.grade, args.date)
  if args.finalize:
    result.finalize()
except Exception as err:
  try:
    print(f"{student}: {err}")
  except ValueError as verr:
    print(f"{verr}: {args.student_id}: {err}")
@ This means that we need the following command-line arguments.

We start with the student ID, course and component code, and grade.
<<add report command arguments to report parser>>=
report_parser.add_argument("student_id",
  help="Student identifier (personnummer or LADOK ID)"
)

report_parser.add_argument("course_code",
  help="The course code (e.g. DD1315) for which the grade is for"
)

report_parser.add_argument("component_code",
  help="The component code (e.g. LAB1) for which the grade is for"
)

report_parser.add_argument("grade",
  help="The grade (e.g. A or P)"
)
@

Next, we have the date.
To ensure it's a valid date we'll make [[argparse]] convert it to [[datetime]] 
format.
If it's not provided, we let [[argparse]] set it to today's date.
<<add report command arguments to report parser>>=
report_parser.add_argument("-d", "--date",
  help="Date on ISO format (e.g. 2021-03-18), "
    f"defaults to today's date ({datetime.date.today()})",
  type=datetime.date.fromisoformat,
  default=datetime.date.today()
)
@

Finally, we add an option whether we want to finalize the grade for attestation 
by the examiner.
<<add report command arguments to report parser>>=
report_parser.add_argument("-f", "--finalize",
  help="Finalize the grade (mark as ready/klarmarkera) for examiner to attest",
  action="store_true",
  default=False
)
@

